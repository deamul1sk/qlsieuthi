import { Component, OnInit, ViewContainerRef } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Location } from '@angular/common';
import { ActivatedRoute, ParamMap } from '@angular/router';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { ToastsManager } from 'ng2-toastr/ng2-toastr';
import { Toast } from 'ng2-toastr';
import { TranslateService } from '@ngx-translate/core';
import { browser } from 'protractor';
import { CurrencyService } from '../currency.service';
import { CurrencyForm } from '../currency-form.component';
import { Country } from '../../country/country';
import { CountryService } from '../../country/country.service';
import { Constants } from '../../../../common/util/constants';

@Component({
  selector: 'app-currency-business',
  templateUrl: './currency-business.component.html',
  providers: [CurrencyService, CountryService]
})

/**
 * @description: Component quản lý việc chỉnh sửa.
 */
export class CurrencyBusinessComponent implements OnInit {
  private sub: any;
  id: number;
  business: string;
  currencyForm: FormGroup;
  currency: any;

  isUpdate: boolean = true;

  listCountry: Country[];

  countrySelections: Array<any> = [];

  indexCountrySelection: number;

  listStatus = Constants.STATUS_LIST;

  constructor(
    private route: ActivatedRoute,
    private location: Location,
    private currencyService: CurrencyService,
    private countryService: CountryService,
    private fb: FormBuilder,
    private translate: TranslateService,
    public toastr: ToastsManager, vcr: ViewContainerRef
  ) {
    this.toastr.setRootViewContainerRef(vcr);
  }

  ngOnInit() {
    // Lấy bản ghi theo 'id' từ @PathParam
    this.sub = this.route.params.subscribe(params => {
      this.id = params['id'];
      this.business = params['business'];
      this.currencyForm = CurrencyForm.currencyForm(this.fb, this.business);
      if (this.business == 'create') {
        this.isUpdate = false;
        this.getListCountry();
      }
      if (this.business == 'update') {
        this.isUpdate = true;
        this.bindingData(this.currencyForm, this.id);
        this.getListCountry();
      }
    });
  }

  bindingData(currencyForm, id) {
    this.currencyService.findOne(id)
      .then(response => {
        this.currency = response.data;
        CurrencyForm.bindingData(currencyForm, this.currency);
      })
      .catch(error => console.log("errors: " + error));
  }

  /**
   * @description : Hàm gọi Update
   * @param currency : truyền object cần chỉnh sửa.
   */
  submit(currency) {
    if (this.isUpdate) {
      this.updateCurrency(currency);
    } else {
      this.createCurrency(currency);
    }
  }

  createCurrency(currency) {
    this.currencyService.create(currency)
      .then(response => {
        this.goBack();
      })
      .catch(error => {
        let message;
        this.translate.get('Message.CreateFail').subscribe((res: string) => {
          message = res;
        });
        this.toastr.error('', message, { dismiss: 'controlled' })
          .then((toast: Toast) => {
            setTimeout(() => {
              this.toastr.dismissToast(toast);
            }, 3000);
          });
      });
  }

  updateCurrency(currency) {
    this.currencyService.update(currency)
      .then(response => {
        this.goBack();
      })
      .catch(error => {
        let message;
        this.translate.get('Message.UpdateFail').subscribe((res: string) => {
          message = res;
        });
        this.toastr.error('', message, { dismiss: 'controlled' })
          .then((toast: Toast) => {
            setTimeout(() => {
              this.toastr.dismissToast(toast);
            }, 3000);
          });
      });
  }

  isValidForm() {
    // check countyr code is valid
    if (this.currencyForm.get('currencyCode').invalid) {
      if (this.currencyForm.get('currencyCode').errors.required) {
        return false;
      }
      if (this.currencyForm.get('currencyCode').errors.pattern != null) {
        return false;
      }
      if (this.currencyForm.get('currencyCode').errors.maxlength != null) {
        return false;
      }
    }
    // check currency name is valid
    if (this.currencyForm.get('currencyName').invalid) {
      if (this.currencyForm.get('currencyName').errors.required) {
        return false;
      }
      if (this.currencyForm.get('currencyName').errors.pattern != null) {
        return false;
      }
      if (this.currencyForm.get('currencyName').errors.maxlength != null) {
        return false;
      }
    }
    // check country is valid
    if (this.currencyForm.get('country.id').invalid) {
      if (this.currencyForm.get('country.id').errors.required) {
        return false;
      }
      if (this.currencyForm.get('country.id').errors.min != null) {
        return false;
      }
    }
    return true;
  }

  private getListCountry() {
    this.countryService.getListCountry()
      .then(response => {
        this.listCountry = response.data;
        this.initializeCountrySelection();
      }).catch(error => {
        console.log(error);
      });
  }

  private initializeCountrySelection() {
    let country_datas = [];
    var countItems = 0;
    if (this.listCountry != null && this.listCountry != undefined) {
      this.listCountry.forEach(element => {
        var item = {
          id: null, text: null
        };
        item.text = element.countryName;
        item.id = element.id;
        country_datas.push(item);
        if (this.currency != undefined && this.currency != null && item.id == this.currency.country.id) {
          this.indexCountrySelection = countItems;
        }
        countItems += 1;
      });
    }
    this.countrySelections = country_datas;
    console.log(this.countrySelections);
  }

  goBack() {
    this.location.back();
  }
}
